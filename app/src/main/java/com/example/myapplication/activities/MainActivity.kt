package com.example.myapplication.activities

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.navigation.NavController
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.ui.AppBarConfiguration
import androidx.navigation.ui.setupActionBarWithNavController
import androidx.navigation.ui.setupWithNavController
import com.example.myapplication.R
import com.example.myapplication.managers.SessionManager
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase

class MainActivity : AppCompatActivity() {

    private lateinit var bottomNav: BottomNavigationView
    private lateinit var navController: NavController
    private lateinit var emergencyLayout: LinearLayout
    private val auth = Firebase.auth

    companion object {
        private const val TAG = "MainActivity"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        Log.d(TAG, "üöÄ === MAINACTIVITY ONCREATE INICIADO ===")

        try {
            enableEdgeToEdge()
            setContentView(R.layout.activity_main)
            Log.d(TAG, "‚úÖ Layout cargado exitosamente")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR CR√çTICO en setContentView: ${e.message}", e)
            showToast("Error cargando la aplicaci√≥n")
            createMinimalLayout()
            return
        }

        // Inicializar vistas b√°sicas
        try {
            bottomNav = findViewById(R.id.bottom_nav)
            emergencyLayout = findViewById(R.id.emergency_layout)
            Log.d(TAG, "‚úÖ Vistas b√°sicas inicializadas")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR inicializando vistas: ${e.message}", e)
            createMinimalLayout()
            return
        }

        // Validaci√≥n de sesi√≥n
        try {
            Log.d(TAG, "üîê Validando sesi√≥n...")
            val currentUser = auth.currentUser
            val sessionEmail = SessionManager.getCurrentUserEmail(this)

            if (currentUser == null || sessionEmail.isNullOrEmpty()) {
                Log.w(TAG, "üö® Sesi√≥n inv√°lida - Firebase: ${currentUser?.email}, SessionManager: $sessionEmail")
                showToast("Sesi√≥n inv√°lida, redirigiendo al login")
                redirectToLogin()
                return
            }

            Log.d(TAG, "‚úÖ Sesi√≥n v√°lida - Usuario: ${currentUser.email}")
            showToast("Bienvenido ${currentUser.email}")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR en validaci√≥n de sesi√≥n: ${e.message}", e)
            redirectToLogin()
            return
        }

        // ‚úÖ SOLUCI√ìN DEFINITIVA: Configurar navegaci√≥n UNA SOLA VEZ
        setupNavigation()

        Log.d(TAG, "‚úÖ === MAINACTIVITY CONFIGURADO EXITOSAMENTE ===")
    }

    private fun setupNavigation() {
        try {
            Log.d(TAG, "üîÑ Configurando navegaci√≥n...")

            val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as? NavHostFragment
            if (navHostFragment == null) {
                Log.e(TAG, "‚ùå NavHostFragment no encontrado")
                showEmergencyScreen("Error de navegaci√≥n - NavHostFragment no encontrado")
                return
            }

            // ‚úÖ OBTENER NAVCONTROLLER CON MANEJO ESPEC√çFICO DEL ERROR
            try {
                navController = navHostFragment.navController
                Log.d(TAG, "‚úÖ NavController obtenido exitosamente")
            } catch (e: IllegalStateException) {
                if (e.message?.contains("SavedStateProvider") == true) {
                    Log.e(TAG, "‚ùå ERROR: SavedStateProvider ya registrado - Usando estrategia alternativa", e)
                    // ‚úÖ ESTRATEGIA ALTERNATIVA: No hacer nada, usar el NavController existente
                    return
                } else {
                    throw e
                }
            }

            // ‚úÖ CONFIGURAR BOTTOM NAVIGATION
            try {
                bottomNav.setupWithNavController(navController)
                Log.d(TAG, "‚úÖ BottomNavigationView configurado")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå ERROR configurando BottomNavigationView: ${e.message}", e)
            }

            // ‚úÖ CONFIGURAR APP BAR
            try {
                val appBarConfiguration = AppBarConfiguration(
                    setOf(
                        R.id.homeFragment,
                        R.id.productsFragment,
                        R.id.carritoFragment,
                        R.id.profileFragment
                    )
                )
                setupActionBarWithNavController(navController, appBarConfiguration)
                Log.d(TAG, "‚úÖ AppBar configurada")
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è AppBar no configurada: ${e.message}")
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR CR√çTICO en setupNavigation: ${e.message}", e)
            showEmergencyScreen("Error cr√≠tico en navegaci√≥n")
        }
    }

    // ‚úÖ SOLUCI√ìN DEFINITIVA: onStart VAC√çO - NO HACER NADA
    override fun onStart() {
        super.onStart()
        Log.d(TAG, "üì± MainActivity onStart - NO HACER NADA para evitar recreaci√≥n")
        // ‚úÖ ABSOLUTAMENTE NADA aqu√≠ - La navegaci√≥n ya se configur√≥ en onCreate
    }

    override fun onResume() {
        super.onResume()
        Log.d(TAG, "üì± MainActivity onResume")
    }

    override fun onPause() {
        super.onPause()
        Log.d(TAG, "üì± MainActivity onPause")
    }

    override fun onStop() {
        super.onStop()
        Log.d(TAG, "üì± MainActivity onStop")
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "üì± MainActivity onDestroy")
    }

    // Los m√©todos restantes se mantienen igual...
    private fun createMinimalLayout() {
        try {
            Log.d(TAG, "üîÑ Creando layout m√≠nimo de emergencia...")
            val layout = LinearLayout(this).apply {
                orientation = LinearLayout.VERTICAL
                setBackgroundColor(resources.getColor(R.color.white, theme))
                gravity = android.view.Gravity.CENTER
            }

            val textView = TextView(this).apply {
                text = "Error cargando la aplicaci√≥n"
                textSize = 18f
                setTextColor(resources.getColor(R.color.black, theme))
            }

            val button = Button(this).apply {
                text = "Cerrar Sesi√≥n"
                setOnClickListener {
                    Log.d(TAG, "üñ±Ô∏è Clic en cerrar sesi√≥n desde layout m√≠nimo")
                    cerrarSesion()
                }
            }

            layout.addView(textView)
            layout.addView(button)
            setContentView(layout)
            Log.d(TAG, "‚úÖ Layout m√≠nimo creado exitosamente")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR CR√çTICO: No se puede crear layout m√≠nimo", e)
            redirectToLogin()
        }
    }

    private fun showEmergencyScreen(message: String) {
        try {
            Log.d(TAG, "üÜò Mostrando pantalla de emergencia: $message")
            val tvEmergencyMessage = findViewById<TextView>(R.id.tv_emergency_message)
            val btnEmergencyLogout = findViewById<Button>(R.id.btn_emergency_logout)

            tvEmergencyMessage.text = message
            emergencyLayout.visibility = View.VISIBLE

            btnEmergencyLogout.setOnClickListener {
                Log.d(TAG, "üñ±Ô∏è Clic en cerrar sesi√≥n desde pantalla de emergencia")
                cerrarSesion()
            }

            bottomNav.visibility = View.GONE
            findViewById<androidx.fragment.app.FragmentContainerView>(R.id.nav_host_fragment).visibility = View.GONE

            Log.d(TAG, "‚úÖ Pantalla de emergencia activada")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR en pantalla de emergencia", e)
            createMinimalLayout()
        }
    }

    private fun redirectToLogin() {
        try {
            Log.d(TAG, "üîÑ Redirigiendo a LoginActivity...")
            val intent = Intent(this, LoginActivity::class.java).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            }
            startActivity(intent)
            finish()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR redirigiendo a login", e)
            finishAffinity()
        }
    }

    private fun cerrarSesion() {
        try {
            Log.d(TAG, "üîí Cerrando sesi√≥n...")
            auth.signOut()
            SessionManager.logout(this)
            Log.d(TAG, "‚úÖ Sesi√≥n cerrada en Firebase y SessionManager")
            redirectToLogin()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR cerrando sesi√≥n", e)
            redirectToLogin()
        }
    }

    private fun showToast(message: String) {
        try {
            Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
            Log.d(TAG, "üí¨ Toast mostrado: $message")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error mostrando toast: ${e.message}", e)
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        return try {
            if (::navController.isInitialized) {
                navController.navigateUp() || super.onSupportNavigateUp()
            } else {
                super.onSupportNavigateUp()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error en onSupportNavigateUp: ${e.message}", e)
            super.onSupportNavigateUp()
        }
    }
}